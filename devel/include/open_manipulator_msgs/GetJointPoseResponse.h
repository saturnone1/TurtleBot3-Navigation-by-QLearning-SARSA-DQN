// Generated by gencpp from file open_manipulator_msgs/GetJointPoseResponse.msg
// DO NOT EDIT!


#ifndef OPEN_MANIPULATOR_MSGS_MESSAGE_GETJOINTPOSERESPONSE_H
#define OPEN_MANIPULATOR_MSGS_MESSAGE_GETJOINTPOSERESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <open_manipulator_msgs/JointPose.h>

namespace open_manipulator_msgs
{
template <class ContainerAllocator>
struct GetJointPoseResponse_
{
  typedef GetJointPoseResponse_<ContainerAllocator> Type;

  GetJointPoseResponse_()
    : position_ctrl_joint_pose()  {
    }
  GetJointPoseResponse_(const ContainerAllocator& _alloc)
    : position_ctrl_joint_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::open_manipulator_msgs::JointPose_<ContainerAllocator>  _position_ctrl_joint_pose_type;
  _position_ctrl_joint_pose_type position_ctrl_joint_pose;





  typedef boost::shared_ptr< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetJointPoseResponse_

typedef ::open_manipulator_msgs::GetJointPoseResponse_<std::allocator<void> > GetJointPoseResponse;

typedef boost::shared_ptr< ::open_manipulator_msgs::GetJointPoseResponse > GetJointPoseResponsePtr;
typedef boost::shared_ptr< ::open_manipulator_msgs::GetJointPoseResponse const> GetJointPoseResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator1> & lhs, const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator2> & rhs)
{
  return lhs.position_ctrl_joint_pose == rhs.position_ctrl_joint_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator1> & lhs, const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace open_manipulator_msgs

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d90103d910754a636e20bdfefafe3642";
  }

  static const char* value(const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd90103d910754a63ULL;
  static const uint64_t static_value2 = 0x6e20bdfefafe3642ULL;
};

template<class ContainerAllocator>
struct DataType< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "open_manipulator_msgs/GetJointPoseResponse";
  }

  static const char* value(const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "JointPose position_ctrl_joint_pose\n"
"\n"
"\n"
"================================================================================\n"
"MSG: open_manipulator_msgs/JointPose\n"
"string[]   joint_name\n"
"float64[]  position\n"
"float64    move_time\n"
;
  }

  static const char* value(const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.position_ctrl_joint_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetJointPoseResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::open_manipulator_msgs::GetJointPoseResponse_<ContainerAllocator>& v)
  {
    s << indent << "position_ctrl_joint_pose: ";
    s << std::endl;
    Printer< ::open_manipulator_msgs::JointPose_<ContainerAllocator> >::stream(s, indent + "  ", v.position_ctrl_joint_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OPEN_MANIPULATOR_MSGS_MESSAGE_GETJOINTPOSERESPONSE_H
